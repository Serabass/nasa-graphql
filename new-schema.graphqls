# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# directive @Fetch(a: Int!) on FIELD_DEFINITION
directive @PassNext(type: Type!, path: String!) on FIELD_DEFINITION
type ApiQuery {
    natural: [NaturalResponse!]!
}

type APODResponse {
    copyright: String!
    date: String!
    explanation: String!
    hdurl: String!
    media_type: String!
    service_version: String!
    title: String!
    url: String!
}

type Asset {
    id: String!
    date: String!
}

type AssetsResponse {
    count: Float!
    results: [Asset!]!
}

type DONKIQuery {
    IPS(startDate: String, endDate: String): [IPSResponse!]!
    FLR(startDate: String, endDate: String): [FLRResponse!]!
}

type EarthQuery {
    imagery(lon: Float!, lat: Float!, date: String!, cloud_score: Boolean!): ImageryResponse!
    assets(lon: Float!, lat: Float!, begin: String!): AssetsResponse!
}

type EPICQuery {
    # /api
    api: ApiQuery!
}

type ExoplanetsQuery {
    # /cgi-bin/nstedAPI
    nsted: NstedAPIQuery!
}

type FLRResponse {
    flrID: String
}

type ImageryResponse {
    cloud_score: Float!
    date: String!
    id: String!
    service_version: String!
    url: String!
}

type IPSResponse {
    catalog: String
}

type LocationResponse {
    location: String!
}

type MarsPhotosQuery {
    # /api/:version/rovers
    rovers(version: String = "v1"): RoversQuery!
}

type NASAImagesQuery {
    search(q: String, center: String, description: String, description_508: String, keywords: String, location: String, media_type: String, nasa_id: String, photographer: String, secondary_creator: String, title: String, year_start: String, year_end: String): SearchResponse!
    asset(nasaId: String!): SearchResponse!
    metadata(nasaId: String!): LocationResponse!
    captions(nasaId: String!): LocationResponse!
}

type NASAQuery {
    # /planetary
    planetary: PlanetaryQuery!

    # /mars-photos
    marsPhotos: MarsPhotosQuery!

    # /neo/rest/:version
    neo(version: String = "v1"): NeoQuery!

    # /EPIC
    EPIC: EPICQuery!

    # /DONKI
    DONKI: DONKIQuery!

    # /techport
    techport: TechportQuery!
}

type NaturalResponse {
    identifier: String!
    caption: String!
    image: String!
    version: String!
    date: String!
}

type NeoBrowseResponse {
    near_earth_objects: [NEOObject!]!
}

type NeoFeedResponse {
    element_count: Float!
}

type NEOObject {
    neo_reference_id: String!
    name: String!
}

type NeoQuery {
    feed: NeoFeedResponse!
    neo(id: Int!): NeoResponse!
    browse: NeoBrowseResponse!
}

type NeoResponse {
    id: String!
    neo_reference_id: String!
    name: String!
    sandbox: String!
}

type NstedAPIQuery {
    nph(table: String!, format: String = "json", where: String!): [NstedAPIResponse!]!
}

type NstedAPIResponse {
    pl_hostname: String!
    pl_letter: String!
}

type Photo {
    id: Float!
    sol: Float!
    img_src: String!
}

type Photo2 {
    id: Float!
    sol: Float!
    img_src: String!
}

type PhotosResponse {
    photos: [Photo!]!
}

type PhotosResponse2 {
    photos: [Photo2!]!
}

type PlanetaryQuery {
    apod(date: String, hd: Boolean): APODResponse!

    # /earth
    earth: EarthQuery!
}

type Project {
    lastUpdated: String!
    id: Float!
}

type ProjectQuery {
    projects: TechportProjectResponse!
}

type ProjectsQuery {
    projects(updatedSince: String): TechportProjectsResponse!

    # /:id
    project(id: Float!): ProjectQuery!
}

type ProjectsResponse {
    totalCount: Float!
    projects: [Project!]!
}

type Query {
    NASA(key: String!): NASAQuery
    NASAImages: NASAImagesQuery
    Exoplanets: ExoplanetsQuery
    rateLimitRemaining: Int
    rateLimit: Int @upper
}

type RoverQuery {
    photos(sol: Float, earth_date: String, page: Float = 1, camera: String): PhotosResponse2!
}

type RoversQuery {
    photos(sol: Float!, roverName: String!): PhotosResponse!

    # /:roverName
    rover(roverName: String!): RoverQuery!
}

type SearchCollectionResponse {
    href: String!
}

type SearchResponse {
    collection: SearchCollectionResponse!
}

type TechportProjectData {
    benefits: String!
}

type TechportProjectResponse {
    project: TechportProjectData!
}

type TechportProjectsResponse {
    projects: ProjectsResponse!
}

type TechportQuery {
    # /api/projects
    projects: ProjectsQuery!
}
