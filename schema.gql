# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthMutation {
  signUp(input: SignUpArgs!): AuthPayload!
  signIn(input: SignInArgs!): AuthPayload!
}

type AuthPayload {
  token: String!
}

type Cart {
  id: Float
  items: [CartItem!]
  sum: Float
}

input CartArgs {
  items: [CartItemArgs!]!
}

type CartItem {
  id: Float
  product: Product
  cart: Cart
  count: Int
}

input CartItemArgs {
  productId: Float!
  count: Float!
}

type CartQuery {
  getCart(id: String!): Cart!
}

type Customer {
  _id: Float
  name: String
  createdDate: DateTime
  getRef: String
}

type CustomerQuery {
  sandbox: Float!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input FeedbackInfoArgs {
  email: String!
  phone: String!
  content: String!
}

type FeedbackMutation {
  submit(feedbackInfo: FeedbackInfoArgs!): Boolean!
}

type MeQuery {
  orders(pagination: PaginationArgs): [Order!]!
}

type MongoQuery {
  Customer: CustomerQuery!
}

type Mutation {
  Store: StoreMutation
  Auth: AuthMutation
}

type Order {
  id: Float
  title: String
  description: String
  user: User
  products: [Product!]!

  # Date Time the order was created
  createdDate: DateTime
  updatedDate: DateTime
}

input PaginationArgs {
  page: Float!
  perPage: Float!
}

type Product {
  # Product id
  id: Float!

  # The title of the product
  title: String!

  # The description of the product
  description: String!

  # Associated category
  category: Order!
  comments: [ProductComment!]!
  ratings: [ProductRating!]!

  # Product price
  price: Float!
  images: [String!]!
}

type ProductCategory {
  # Product id
  id: Float!

  # The title of the product
  title: String!

  # The description of the product
  description: String!

  # Associated project
  parent: Order!

  # The list of products
  products: [Product!]!
}

type ProductComment {
  id: ID!
  content: String!
  user: User!
  product: Product!
}

type ProductMutation {
  createOrder(cart: CartArgs!): [Order!]!
}

type ProductQuery {
  all(pagination: PaginationArgs): [Product!]
  search(query: String, pagination: PaginationArgs): [Product!]!
  categories(pagination: PaginationArgs): [ProductCategory!]!
}

type ProductRating {
  id: Float
  product: Product!
  user: User!
  value: Float
}

type Query {
  Store: StoreQuery
  Mongo: MongoQuery
}

input SignInArgs {
  email: String!
  password: String!
}

input SignUpArgs {
  firstName: String!
  lastName: String!
  password: String!
  email: String!
}

type StoreMutation {
  Product: ProductMutation!
  Feedback: FeedbackMutation!
}

type StoreQuery {
  Products: ProductQuery!
  Me: MeQuery!
  Cart: CartQuery!
  Sub: StoreSubQuery
  num: Float
  RemoteApi(data: SWAPIFilmArgs!): SWAPIFilmResponse
  RemoteSchema(id: Float!): Float
}

type StoreSubQuery {
  Products: ProductQuery!
}

input SWAPIFilmArgs {
  id: Float!
}

type SWAPIFilmResponse {
  title: String!
}

type User {
  id: Float!
  firstName: String!
  middleName: String!
  lastName: String!
  email: String!
  password: String!
  comments: [ProductComment!]!
  orders: [Order!]!
  ratings: [ProductRating!]!
}
